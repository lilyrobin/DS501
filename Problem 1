import pandas as pd
import numpy as np

# Downloaded the 1 million ratings MovieLens data set and saved the files in C:/iPython/ 
# Merge all of the data[ratings, users, movies] into a single Pandas DataFrame

# Users information from Users.dat file
unames = ['user_id', 'gender', 'age', 'occupation', 'zip'] 
users = pd.read_table('your_file_path_here', sep='::', header=None,
                      names=unames)

# Rating information from Ratings.dat file
rnames = ['user_id', 'movie_id', 'rating', 'timestamp']
ratings = pd.read_table('your_file_path_here', sep='::', header=None,
                        names=rnames)

# Movies information from Movies.dat file
mnames = ['movie_id', 'title', 'genres']
movies = pd.read_table('your_file_path_here', sep='::', header=None,
                        names=mnames)

# We first merge ratings with users then merging that result with the movies data. 
data = pd.merge(pd.merge(ratings, users), movies)

#print data.ix[0]

# Store the data into an HDF5[hierarchical data format] file
store = pd.HDFStore('data.h5')

# How many movies have an average rating over 4.5 overall?
meandf= data.groupby(['title'], as_index=False).aggregate({'rating':np.mean})
ratingdf = meandf[meandf['rating']>4.5]
print "Number of movies with average rating over 4.5 overall are " + str(len(ratingdf.sort(['rating'], ascending=[0])))
print "\n"
ratingdf.sort(['rating'], ascending=[0])[:10]

# How many movies have an average rating over 4.5 among men? How about women?
# Group by Title, Gender
mean_ratings= data.pivot_table('rating', rows='title', cols='gender', aggfunc='mean')
# Get Top film among male viewers by filtering the avg rating value > 4.5
top_male_ratings = mean_ratings[(mean_ratings.M>4.5)].sort_index(by='M', ascending=False)


print "Number of movies with average rating over 4.5 among men are " + str(len(top_male_ratings.index))
print "\n"
top_male_ratings

# How many movies have an average rating over 4.5 among women?
# Get Top film among female viewers by filtering the avg rating value > 4.
top_female_ratings = mean_ratings[(mean_ratings.F>4.5)].sort_index(by='F', ascending=False)
print "\n Number of movies with average rating over 4.5 among women are " + str(len(top_female_ratings.index))
print "\n"
top_female_ratings[:10]

# How many movies have an median rating over 4.5 among men over age 30?

# Filter by age > 25 as age 30 can fall within the age group range 25-34 
filtered=data[(data['age']>25)]
# Calculate the median across gender
median_ratings = filtered.pivot_table( values='rating', rows='title', cols=['gender'], aggfunc='median')
men_med_ratings = median_ratings[(median_ratings.M>4.5)].sort_index(by='M', ascending=False)


print "Number of movies with average rating over 4.5 among men over age 30 are " + str(len(men_med_ratings.index))
print "\n"
# Displaying the top 10 values only
men_med_ratings[:10]

# How many movies have an median rating over 4.5 among women over age 30?

# Get the median ratings for Female
women_med_ratings = median_ratings[(median_ratings.F>4.5)].sort_index(by='F', ascending=False)

print "Number of movies with average rating over 4.5 among women over age 30 are " + str(len(women_med_ratings.index))
print "\n"
# Displaying the top 10 values only
women_med_ratings[:10]

# What are the ten most popular movies?

# We count the number of rating by users because the more rating times there are,
# the more concentration the movie has which can serve to prove this movie is very popular
#print "\n most rated:"
high_ratings= data.pivot_table('rating', rows='title', aggfunc='mean')
ratings_by_title = data.groupby('title').size().order(ascending=False)

# These are the movies with the highest number of ratings. but are they rated high? 
# let's say among the top 100 movies by rating, the most popular are the 10 with the highest average rating

# most_rated2 = ratings_by_title.head(n=100)
# most_rated2 = most_rated2.index
high_ratings = high_ratings.ix[ratings_by_title.index[:100]]
high_ratings.order(ascending=False)
print "Highest rated:"
print high_ratings[:10]

# Popular movies are considered to be those that have more reviews and high rating > 4.5 between both the genders irrespective 
# of the age group

# look for movies that are highly rated
# Get the mean ratings of those highly rated movies by gender
mean_ratings= data.pivot_table('rating', rows='title', cols='gender', aggfunc='mean')
mean_ratings = mean_ratings.ix[ratings_by_title.index]
# Relaxing the mean rating to 4.4 as there are fewer records for 4.5
df=mean_ratings[(mean_ratings.F>4.4)&(mean_ratings.M>4.4)]
top_ratings = df.sort_index(by=['F','M'], ascending=False)
print "\n"
top_ratings 

# Make some conjectures about how easy various groups are to please? Support your answers with data!
# For example, one might conjecture that people between the ages of 1 and 10 are the easiest to please since they are all young children. This conjecture may or may not be true, but how would you support or disprove either conclusion with with data?
# Be sure to come up with your own conjectures and support them with data!


# print "Conjecture 1: Men prefer Action movies over Drama"
# Total number of pure action movies in the dataset
action=data[(data['genres']=='Action')]
action_ratings= action.pivot_table('rating', rows=['title'], cols='genres', aggfunc='mean').sort_index(by='Action', ascending=False)
# Filter the data by male
menact_data=data[(data.gender=='M')&(data.genres=='Action')]
act_ratings= menact_data.pivot_table('rating', rows=['title'], cols='genres', aggfunc='mean').sort_index(by=['Action'], ascending=False)
male_ratingscount= menact_data.pivot_table('rating', rows=['title'], cols='genres', aggfunc='sum').sort_index(by=['Action'], ascending=False)
print "Total number of Action movies that received reviews from men are " + str(act_ratings.index.size) +" out of " + str(action_ratings.index.size)
total_ratings=menact_data.pivot_table('rating', rows=['gender'], cols='genres', aggfunc='sum').sort_index(by='Action', ascending=False)
# Calculate the avg review for Action movies
# Sum of ratings/total no. movies that received ratings
avg_action = total_ratings.iloc[0]['Action']/act_ratings.index.size
print "Avg ratings for Action movies by men are " + str(avg_action)
# Received a good review above 4
act_ratings =act_ratings[act_ratings.Action>4]
print str(act_ratings.index.size) + " received rating greater than 4"
print "\n"

# Total number of pure Drama movies in the dataset
drama=data[(data['genres']=='Drama')]
drama_ratings= drama.pivot_table('rating', rows=['title'], cols='genres', aggfunc='mean').sort_index(by='Drama', ascending=False)
# Filter the data by male
mendrm_data=data[(data.gender=='M')&(data.genres=='Drama')]
drm_ratings= mendrm_data.pivot_table('rating', rows=['title'], cols='genres', aggfunc='mean').sort_index(by=['Drama'], ascending=False)
print "Total number of Drama movies that received reviews from men are " + str(drm_ratings.index.size) +" out of " + str(drama_ratings.index.size)
total_ratings=mendrm_data.pivot_table('rating', rows=['gender'], cols='genres', aggfunc='sum').sort_index(by='Drama', ascending=False)
# Calculate the avg review for Drama movies
# Sum of ratings/total no. movies that received ratings
avg_drama = total_ratings.iloc[0]['Drama']/drm_ratings.index.size
print "Avg ratings for Drama movies by men are " + str(avg_drama)
# Received a good review above 4
drm_ratings =drm_ratings[drm_ratings.Drama>4]
print str(drm_ratings.index.size) + " received rating greater than 4"

# Conclusion:
# Conjecture is true. Men prefer Action movies over genre as the average ratings for action movie is higher than drama.

#conjecture: look at most popular genres among different age groups 

#most popular genre
e=data.groupby('genres').size()
e.sort(ascending=False)
#print e
#most rated is comedy

#Conjectures: which is the most common movie style among middle aged people(40-60)? I guess Drama
print "\n most popular genre among middle aged:"
middle_age_data=data[(data.age>=40)&(data.age<=60)]
a=middle_age_data.groupby('genres').size()
a.sort(ascending=False)
print a[:10]
#yes, drama. 

labels = ['Under 18', '18-24', '25-34', '35-44', '45-49', '50-55', '56+']
dat=data
dat['age_group'] = pd.cut(dat.age, bins=(0, 17, 24, 34, 44, 49, 55, 100), right=True, labels=labels)

#check all age blocks of 10 years
#kids
print "\n most common genre among kids:"
kids=data[(data.age_group=='Under 18')]
f=kids.groupby('genres').size()
f.sort(ascending=False)
print f[:10]

#teens
print "\n most common genre among teens:"
teens=data[(data.age_group=='18-24')]
b=teens.groupby('genres').size()
b.sort(ascending=False)
print b[:10]

#20's
print "\n most common genre among 20's:"
a20=data[(data.age_group=='25-34')]
c=a20.groupby('genres').size()
c.sort(ascending=False)
print c[:10]

#30's
print "\n most common genre among 30's:"
a30=data[(data.age_group=='35-44')]
g=a30.groupby('genres').size()
g.sort(ascending=False)
print g[:10]

#40's
print "\n most common genre among 40's:"
a40=data[(data.age_group=='45-49')]
g=a40.groupby('genres').size()
g.sort(ascending=False)
print g[:10]

#50's
print "\n most common genre among 50's:"
a50=data[(data.age_group=='50-55')]
g=a50.groupby('genres').size()
g.sort(ascending=False)
print g[:10]

#plus
print "\n most common genre among oldest:"
old=data[(data.age_group=='56+')]
g=old.groupby('genres').size()
g.sort(ascending=False)
print g[:10]
